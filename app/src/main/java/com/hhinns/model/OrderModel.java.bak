package com.hhinns.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.content.Context;
import android.content.SharedPreferences;

import com.hhinns.dataprocess.AjaxStatus;
import com.hhinns.dataprocess.BaseModel;
import com.hhinns.dataprocess.BeeCallback;
import com.hhinns.library.CommonUtils;
import com.hhinns.library.ProtocolConst;
import com.hhinns.main.MainActivity;
import com.hhinns.protocol.SEARCH;

public class OrderModel extends BaseModel{

	public List<Map<String, String>> hotelList = null;
	public List<Map<String, String>>orderlList = null;
	public static final int pages = 10;
	public OrderModel(Context context)
	{
		super(context);
		hotelList = new ArrayList<Map<String,String>>();
		orderlList = new ArrayList<Map<String,String>>();
	}
	
	public void searchHotel(SEARCH search)
	{
		String url = ProtocolConst.SEARCH_HOTEL;
		if (!super.checkNet(mContext))
			return;
		BeeCallback<JSONObject> cb = new BeeCallback<JSONObject>() {

			@Override
			public void callback(String url, JSONObject jo, AjaxStatus status) {

				OrderModel.this.callback(url, jo, status);
				try {
					if(jo==null)
					{
						OrderModel.this.OnMessageResponse(url, jo, status);
					}
					String responseStatus = jo.optString("status");

					if (responseStatus.equals("ok")) {
						if(null!=jo.optJSONArray("data"))
						{
						JSONArray data = jo.optJSONArray("data");
						if(!hotelList.isEmpty())
							hotelList.clear();
						if(null!=data&&data.length()>0)
						{
							Map <String, String> map = null;
							for(int i=0;i<data.length();i++)
							{
							JSONObject items = data.getJSONObject(i);
							 map = new HashMap<String, String>();
							 map.put("price", items.getString("room_price"));
							 map.put("lon", items.getString("lon"));
							 map.put("name", items.getString("Hotel_Name"));
							 map.put("id", items.getString("Hotel_Id"));
							 map.put("lat", items.getString("lat"));
							 map.put("addre", items.getString("Address"));
							 map.put("state", "有房");
							 hotelList.add(map);
							}
						}
						}else
						{
							if(!hotelList.isEmpty())
								hotelList.clear();
							Map <String, String> map = null;
							JSONObject items = jo.optJSONObject("data");
							 map = new HashMap<String, String>();
							 map.put("price", items.getString("room_price"));
							 map.put("lon", items.getString("lon"));
							 map.put("name", items.getString("Hotel_Name"));
							 map.put("id", items.getString("Hotel_Id"));
							 map.put("lat", items.getString("lat"));
							 map.put("addre", items.getString("Address"));
							 map.put("state", "有房");
							 hotelList.add(map);
							
						}
					} 
					OrderModel.this.OnMessageResponse(url, jo, status);
				} catch (JSONException e) {
					e.printStackTrace();
				}
			}

		};
		Map<String, Object> params = new HashMap<String, Object>();
//		params.put("cityid", search.cityid);
//		params.put("shopareaid", search.shopareaid);
//		params.put("indate", search.indate);
//		params.put("outdate", search.outdate);
//		params.put("latitude", search.latitude);
//		params.put("longitude", search.longitude);
//		params.put("orderby", search.orderby);
//		params.put("pageIndex", "1");
//		params.put("pageSize", pages);
		
		params.put("cityid", search.cityid);
		params.put("shopareaid",  search.shopareaid);
		params.put("indate", search.indate);
		params.put("outdate",  search.outdate);
		params.put("latitude",MainActivity.mLocation.latitude);
		params.put("longitude",MainActivity.mLocation.longitude);
		params.put("orderby", search.orderby);
		params.put("pageIndex", "1");
		params.put("pageSize", pages);
		cb.url(url).type(JSONObject.class).params(params);
		aq.ajax(cb);
	}
	
	
	public void searchHotelMore(SEARCH search)
	{
		String url = ProtocolConst.SEARCH_HOTEL;
		if (!super.checkNet(mContext))
			return;
		BeeCallback<JSONObject> cb = new BeeCallback<JSONObject>() {

			@Override
			public void callback(String url, JSONObject jo, AjaxStatus status) {

				OrderModel.this.callback(url, jo, status);
				try {
					String responseStatus = jo.optString("status");

					if (responseStatus.equals("ok")) {
						if(null!=jo.optJSONArray("data"))
						{
						JSONArray data = jo.optJSONArray("data");
						if(null!=data&&data.length()>0)
						{
							Map <String, String> map = null;
							for(int i=0;i<data.length();i++)
							{
							JSONObject items = data.getJSONObject(i);
							 map = new HashMap<String, String>();
							 map.put("price", items.getString("room_price"));
							 map.put("lon", items.getString("lon"));
							 map.put("hotelName", items.getString("Hotel_Name"));
							 map.put("id", items.getString("Hotel_Id"));
							 map.put("lat", items.getString("lat"));
							 map.put("address", items.getString("Address"));
							 map.put("roomState", "有房");
							 hotelList.add(map);
							}
						}
						}else
						{
							Map <String, String> map = null;
							JSONObject items = jo.optJSONObject("data");
							 map = new HashMap<String, String>();
							 map.put("price", items.getString("room_price"));
							 map.put("lon", items.getString("lon"));
							 map.put("hotelName", items.getString("Hotel_Name"));
							 map.put("id", items.getString("Hotel_Id"));
							 map.put("lat", items.getString("lat"));
							 map.put("address", items.getString("Address"));
							 map.put("roomState", "有房");
							 hotelList.add(map);
						}
					} 
					OrderModel.this.OnMessageResponse(url, jo, status);
				} catch (JSONException e) {
					e.printStackTrace();
				}
			}

		};
		int index = (int) Math.ceil((double) hotelList.size() * 1.0
				/ pages) + 1;
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("cityid", search.cityid);
		params.put("shopareaid", search.shopareaid);
		params.put("indate", search.indate);
		params.put("outdate", search.outdate);
		params.put("latitude", search.latitude);
		params.put("longitude", search.longitude);
		params.put("orderby", search.orderby);
		params.put("pageIndex", index);
		params.put("pageSize", pages);
		cb.url(url).type(JSONObject.class).params(params);
		aq.ajax(cb);
	}
	
	public void orderList()
	{
		String url = ProtocolConst.ORDER_LIST;
		if (!super.checkNet(mContext))
			return;
		BeeCallback<JSONObject> cb = new BeeCallback<JSONObject>() {

			@Override
			public void callback(String url, JSONObject jo, AjaxStatus status) {

				OrderModel.this.callback(url, jo, status);
				try {
					String responseStatus = jo.optString("status");

					if (responseStatus.equals("ok")) {
						if(null!=jo.optJSONArray("data"))
						{
						JSONArray data = jo.optJSONArray("data");
						if(!orderlList.isEmpty())
							orderlList.clear();
						if(null!=data&&data.length()>0)
						{
							Map <String, String> map = null;
							for(int i=0;i<data.length();i++)
							{
							JSONObject items = data.getJSONObject(i);
							 map = new HashMap<String, String>();
							 map.put("number", items.getString("BookingNumber"));
							 map.put("name", items.getString("Hotel_Name"));
							 map.put("date", items.getString("Dates"));
							 map.put("amount", items.getString("BookingAmount"));
							 map.put("checkinDate",items.getString("CheckInDate"));
							 map.put("flag", items.getString("Cflag"));
							 map.put("state", items.getString("PayStust"));
							 orderlList.add(map);
							}
						}
						}else
						{
							if(null!=jo.optJSONObject("data"))
							{
							if(!orderlList.isEmpty())
							orderlList.clear();
							Map <String, String> map = null;
							JSONObject items = jo.optJSONObject("data");
							 map = new HashMap<String, String>();
							 map.put("number", items.getString("BookingNumber"));
							 map.put("name", items.getString("Hotel_Name"));
							 map.put("date", items.getString("Dates"));
							 map.put("amount", items.getString("BookingAmount"));
							 map.put("checkinDate",items.getString("CheckInDate"));
							 map.put("flag", items.getString("Cflag"));
							 map.put("state", items.getString("PayStust"));
							 orderlList.add(map);
							}
						}
					} 
					OrderModel.this.OnMessageResponse(url, jo, status);
				} catch (JSONException e) {
					e.printStackTrace();
				}
			}

		};
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("userid",CommonUtils.getSharedPreFerences(mContext, CommonUtils.SHARED_USER_NAME));
		params.put("pageIndex", "1");
		params.put("pageSize", pages);
		cb.url(url).type(JSONObject.class).params(params);
		aq.ajax(cb);
	}
	
	public void orderListMore()
	{
		String url = ProtocolConst.ORDER_LIST;
		if (!super.checkNet(mContext))
			return;
		BeeCallback<JSONObject> cb = new BeeCallback<JSONObject>() {

			@Override
			public void callback(String url, JSONObject jo, AjaxStatus status) {

				OrderModel.this.callback(url, jo, status);
				try {
					String responseStatus = jo.optString("status");

					if (responseStatus.equals("ok")) {
						if(null!=jo.optJSONArray("data"))
						{
						JSONArray data = jo.optJSONArray("data");
						if(null!=data&&data.length()>0)
						{
							Map <String, String> map = null;
							for(int i=0;i<data.length();i++)
							{
							JSONObject items = data.getJSONObject(i);
							 map = new HashMap<String, String>();
							 map.put("number", items.getString("BookingNumber"));
							 map.put("name", items.getString("Hotel_Name"));
							 map.put("date", items.getString("Dates"));
							 map.put("amount", items.getString("BookingAmount"));
							 map.put("checkinDate",items.getString("CheckInDate"));
							 map.put("flag", items.getString("Flag"));
							 orderlList.add(map);
							}
						}
						}else
						{
							if(null!=jo.optJSONObject("data"))
							{
							Map <String, String> map = null;
							JSONObject items = jo.optJSONObject("data");
							 map = new HashMap<String, String>();
							 map.put("number", items.getString("BookingNumber"));
							 map.put("name", items.getString("Hotel_Name"));
							 map.put("date", items.getString("Dates"));
							 map.put("amount", items.getString("BookingAmount"));
							 map.put("checkinDate",items.getString("CheckInDate"));
							 map.put("flag", items.getString("Flag"));
							 orderlList.add(map);
							}
						}
						
					} 
					OrderModel.this.OnMessageResponse(url, jo, status);
				} catch (JSONException e) {
					e.printStackTrace();
				}
			}

		};
		int index = (int) Math.ceil((double) orderlList.size() * 1.0
				/ pages) + 1;
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("userid", CommonUtils.getSharedPreFerences(mContext, CommonUtils.SHARED_USER_NAME));
		params.put("pageIndex", index);
		params.put("pageSize", pages);
		cb.url(url).type(JSONObject.class).params(params);
		aq.ajax(cb);
	}

	
	
	
	
	
}
